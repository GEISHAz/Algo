#SQL Lv 1. 아픈동물찾기
SELECT ANIMAL_ID, NAME 
FROM ANIMAL_INS
WHERE INTAKE_CONDITION = 'Sick';

# SQL Lv 1. 어린동물 찾기 

SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE INTAKE_CONDITION != 'Aged'
ORDER BY ANIMAL_ID;

# SQL Lv 2. 최소값 구하기

SELECT MIN(DATETIME) AS 시간
FROM ANIMAL_INS;

# SQL Lv 2. 동물 수 구하기

SELECT COUNT(*) 
FROM ANIMAL_INS;

# SQL Lv 2. 동명 동물 수 찾기 
SELECT NAME, COUNT(NAME) AS 'COUNT'
FROM ANIMAL_INS 
GROUP BY NAME
HAVING COUNT(NAME) > 1
ORDER BY NAME;

# SQL Lv 2. 이름에 el이 들어가는 동물 찾기

SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE ANIMAL_TYPE = 'Dog' 
AND NAME LIKE "%EL%"
ORDER BY NAME;

20240917===========================================

# SQL Lv 1. 동물의 아이디와 이름

SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

# SQL Lv 1. 여러기준으로 정렬하기

SELECT ANIMAL_ID,NAME,DATETIME
FROM ANIMAL_INS
ORDER BY NAME, DATETIME DESC;

# SQL Lv 1. 상위 N개 레코드

SELECT NAME
FROM ANIMAL_INS
ORDER BY DATETIME
LIMIT 1;

# SQL Lv 1. 이름이 있는 동물의 아이디

SELECT ANIMAL_ID 
FROM ANIMAL_INS
WHERE NAME IS NOT NULL;

# SQL Lv 2. 중복 제거하기

SELECT COUNT(DISTINCT NAME) AS count
FROM ANIMAL_INS
WHERE NAME IS NOT NULL;

20240918===========================================

# SQL Lv 1. 나이 정보가 없는 회원 수 구하기

SELECT COUNT(*)
FROM USER_INFO
WHERE AGE IS NULL;

# SQL Lv 1. 강원도에 위치한 생산공장 목록 출력하기

SELECT FACTORY_ID,FACTORY_NAME,ADDRESS
FROM FOOD_FACTORY
WHERE ADDRESS LIKE "강원도%";

# SQL Lv 1. 가장 비싼 상품 구하기

SELECT MAX(PRICE) AS MAX_PRICE
FROM PRODUCT;

# SQL Lv 1. 경기도에 위치한 식품창고 목록 출력하기

# COALESCE(NAME,"DEFAULT")  NAME 출력하고 NAME IS NULL 이면 DEFAULT 출력
SELECT WAREHOUSE_ID,WAREHOUSE_NAME,ADDRESS,COALESCE(FREEZER_YN,'N') AS FREEZER_YN
FROM FOOD_WAREHOUSE
WHERE ADDRESS LIKE "경기도%"
ORDER BY WAREHOUSE_ID;

# SQL Lv 2. 가격이 제일 비싼 식품의 정보 출력하기

SELECT PRODUCT_ID,PRODUCT_NAME,PRODUCT_CD,CATEGORY,PRICE
FROM FOOD_PRODUCT
ORDER BY PRICE DESC
LIMIT 1;

20240921===========================================

# SQL Lv 1. 흉부외과 또는 일반외과 의사 목록 출력하기

#DATE_FORMAT(HIRE_YMD,"%Y-%M-%D")  %D 인지 %d인지에 따라 표현방식 다름
SELECT DR_NAME, DR_ID, MCDP_CD, DATE_FORMAT(HIRE_YMD,"%Y-%m-%d") AS HIRE_YMD
FROM DOCTOR
WHERE MCDP_CD = "CS" OR MCDP_CD = "GS"
ORDER BY HIRE_YMD DESC, DR_NAME;

# SQL Lv 1. 역순 정렬하기

SELECT NAME, DATETIME
FROM ANIMAL_INS
ORDER BY ANIMAL_ID DESC;

# SQL Lv 2. NULL 처리하기

SELECT ANIMAL_TYPE, COALESCE(NAME,"No name") AS NAME,SEX_UPON_INTAKE
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

# SQL Lv 1. 이름이 없는 동물의 아이디

SELECT ANIMAL_ID
FROM ANIMAL_INS
WHERE NAME IS NULL
ORDER BY ANIMAL_ID;


# SQL Lv 2. DATETIME에서 DATE로 형 변환

SELECT ANIMAL_ID,NAME, DATE_FORMAT(DATETIME,"%Y-%m-%d") AS "날짜"
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

20240922===========================================

-- SQL Lv 2. 고양이와 개는 몇 마리 있을까

SELECT ANIMAL_TYPE,COUNT(*) AS "count"
FROM ANIMAL_INS
GROUP BY ANIMAL_TYPE
ORDER BY ANIMAL_TYPE;

-- SQL Lv 2. 중성화 여부 파악하기

SELECT ANIMAL_ID,NAME, 
    CASE WHEN SEX_UPON_INTAKE LIKE '%Neutered%' THEN 'O'
    WHEN SEX_UPON_INTAKE LIKE '%Spayed%' THEN 'O'
    ELSE 'X' END 
    AS "중성화"
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

-- SQL Lv 2. 입양 시각 구하기(1)

SELECT TO_NUMBER(TO_CHAR(DATETIME,'HH24')) AS HOUR,COUNT(*) AS COUNT
FROM ANIMAL_OUTS
WHERE TO_CHAR(DATETIME,'HH24') BETWEEN 9 AND 19
GROUP BY TO_CHAR(DATETIME,'HH24')
ORDER BY HOUR;

20240924===========================================

-- SQL Lv 1. 인기있는 아이스크림

SELECT FLAVOR 
FROM FIRST_HALF
ORDER BY TOTAL_ORDER DESC, SHIPMENT_ID;

-- SQL Lv 1. 12세 이하인 여자 환자 목록 출력하기

SELECT PT_NAME, PT_NO, GEND_CD, AGE, COALESCE(TLNO,'NONE')
FROM PATIENT
WHERE AGE < 13 AND GEND_CD = 'W'
ORDER BY AGE DESC,PT_NAME;

-- SQL Lv 2. 자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기

SELECT CAR_TYPE, COUNT(*) AS CARS
FROM CAR_RENTAL_COMPANY_CAR
WHERE OPTIONS LIKE '%가죽시트%'
  OR OPTIONS LIKE '%열선시트%'
  OR OPTIONS LIKE '%통풍시트%'
GROUP BY CAR_TYPE
ORDER BY CAR_TYPE;

-- SQL Lv 2. 조건에 맞는 도서와 저자 리스트 출력하기

SELECT b.BOOK_ID as BOOK_ID, a.AUTHOR_NAME as AUTHOR_NAME, DATE_FORMAT(b.PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK b
LEFT JOIN AUTHOR a ON b.AUTHOR_ID = A.AUTHOR_ID
WHERE b.CATEGORY = '경제'
ORDER BY b.PUBLISHED_DATE;

20240929===========================================

-- SQL Lv 3. 카테고리별 도서 판매량 집계하기

SELECT CATEGORY, SUM(SALES) AS TOTAL_SALES
FROM BOOK A
RIGHT JOIN BOOK_SALES B ON A.BOOK_ID = B.BOOK_ID
WHERE B.SALES_DATE BETWEEN DATE '2022-01-01' AND DATE '2022-01-31'
GROUP BY A.CATEGORY
ORDER BY 1;

-- LV 2. 상품별 오프라인 매출 구하기

SELECT P.PRODUCT_CODE, SUM(SALES_AMOUNT * P.PRICE) AS SALES
FROM PRODUCT P 
RIGHT JOIN OFFLINE_SALE O
ON P.PRODUCT_ID = O.PRODUCT_ID
GROUP BY P.PRODUCT_CODE
ORDER BY SALES DESC, P.PRODUCT_CODE;

-- Lv 3. 조건별로 분류하여 주문상태 출력하기

SELECT ORDER_ID, PRODUCT_ID, TO_CHAR(OUT_DATE,'YYYY-MM-DD') AS OUT_DATE, CASE WHEN OUT_DATE <= DATE '2022-05-01' THEN '출고완료' WHEN OUT_DATE > DATE '2022-05-01' THEN '출고대기' ELSE '출고미정' END AS "출고여부"
FROM FOOD_ORDER
ORDER BY ORDER_ID;

20241001===========================================

-- Lv 2. 성분으로 구분한 아이스크림 총 주문량

SELECT INGREDIENT_TYPE, SUM(TOTAL_ORDER) AS TOTAL_ORDER
FROM FIRST_HALF A
LEFT JOIN ICECREAM_INFO B
ON A.FLAVOR = B.FLAVOR
GROUP BY B.INGREDIENT_TYPE
ORDER BY TOTAL_ORDER;

-- Lv 3. 오랜기간 보호한 동물 (1)

SELECT A.NAME,A.DATETIME
FROM ANIMAL_INS A
LEFT JOIN ANIMAL_OUTS B
ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE B.ANIMAL_ID IS NULL
ORDER BY A.DATETIME
FETCH FIRST 3 ROWS ONLY;

-- Lv 3. 있었는데요 없었습니다

SELECT a.ANIMAL_ID, a.NAME
FROM ANIMAL_INS a
LEFT JOIN ANIMAL_OUTS b
ON a.ANIMAL_ID = b.ANIMAL_ID
WHERE a.DATETIME > b.DATETIME
ORDER BY a.DATETIME;

20241002===========================================

# Lv 3. 오랜기간 보호한 동물(2)

SELECT B.ANIMAL_ID, B.NAME
FROM ANIMAL_INS A, ANIMAL_OUTS B
WHERE A.ANIMAL_ID = B.ANIMAL_ID
ORDER BY DATEDIFF(B.DATETIME,A.DATETIME) DESC
LIMIT 2;

# Lv 2. 조건에 맞는 아이템들의 가격의 총합 구하기

SELECT SUM(PRICE) AS TOTAL_PRICE
FROM ITEM_INFO
WHERE RARITY = 'LEGEND'

# LV 4. 보호소에서 중성화한 동물

SELECT A.ANIMAL_ID,A.ANIMAL_TYPE,A.NAME
FROM ANIMAL_INS A JOIN ANIMAL_OUTS B
ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE A.SEX_UPON_INTAKE LIKE "Intact%"
AND (B.SEX_UPON_OUTCOME LIKE "Spayed%"
OR B.SEX_UPON_OUTCOME LIKE"Neutered%")
ORDER BY A.ANIMAL_ID;

20241003===========================================

# Lv 3. 대여기록이 존재하는 자동차 리스트 구하기

SELECT DISTINCT A.CAR_ID 
FROM CAR_RENTAL_COMPANY_CAR A
LEFT JOIN CAR_RENTAL_COMPANY_RENTAL_HISTORY B
ON A.CAR_ID = B.CAR_ID
WHERE A.CAR_TYPE = '세단'
AND B.START_DATE BETWEEN '2022-10-01' AND '2022-10-31' 
ORDER BY CAR_ID DESC;

# Lv. 3 조건에 맞는 사용자와 총 거래금액 조회하기

SELECT B.USER_ID,B.NICKNAME,SUM(PRICE) AS TOTAL_SALES
FROM USED_GOODS_BOARD A
LEFT JOIN USED_GOODS_USER B
ON A.WRITER_ID = B.USER_ID 
WHERE A.STATUS = 'DONE' 
GROUP BY B.USER_ID
HAVING TOTAL_SALES >= 700000
ORDER BY TOTAL_SALES;

# Lv 2. 루시와 엘라 찾기

SELECT ANIMAL_ID,NAME,SEX_UPON_INTAKE
FROM ANIMAL_INS
WHERE NAME IN ('Lucy','Ella','Pickle','Rogan','Sabrina','Mitty')
ORDER BY ANIMAL_ID;


20241005===========================================

# Lv 1. 조건에 맞는 도서 리스트 출력하기

SELECT BOOK_ID, DATE_FORMAT(PUBLISHED_DATE,"%Y-%m-%d") AS PUBLISHED_DATE
FROM BOOK
WHERE CATEGORY = '인문'
AND (PUBLISHED_DATE BETWEEN '2021-01-01' AND '2021-12-31')
ORDER BY BOOK_ID,PUBLISHED_DATE;

# Lv 2. 3월에 태어난 여성 회원 목록 출력하기

SELECT MEMBER_ID, MEMBER_NAME, GENDER, DATE_FORMAT(DATE_OF_BIRTH,'%Y-%m-%d') AS DATE_OF_BIRTH
FROM MEMBER_PROFILE
WHERE DATE_FORMAT(DATE_OF_BIRTH,'%m') = '03'
AND TLNO IS NOT NULL AND GENDER = 'W'
ORDER BY MEMBER_ID;

# Lv 4. 식품분류별 가장 비싼 식품의 정보 조회하기

SELECT CATEGORY, PRICE AS MAX_PRICE, PRODUCT_NAME
FROM FOOD_PRODUCT
WHERE PRICE IN (SELECT MAX(PRICE) 
               FROM FOOD_PRODUCT
               GROUP BY CATEGORY)
               AND CATEGORY IN ('식용유','과자','국','김치')
ORDER BY MAX_PRICE DESC;