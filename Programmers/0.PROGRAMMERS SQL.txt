#SQL Lv 1. 아픈동물찾기
SELECT ANIMAL_ID, NAME 
FROM ANIMAL_INS
WHERE INTAKE_CONDITION = 'Sick';

# SQL Lv 1. 어린동물 찾기 

SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE INTAKE_CONDITION != 'Aged'
ORDER BY ANIMAL_ID;

# SQL Lv 2. 최소값 구하기

SELECT MIN(DATETIME) AS 시간
FROM ANIMAL_INS;

# SQL Lv 2. 동물 수 구하기

SELECT COUNT(*) 
FROM ANIMAL_INS;

# SQL Lv 2. 동명 동물 수 찾기 
SELECT NAME, COUNT(NAME) AS 'COUNT'
FROM ANIMAL_INS 
GROUP BY NAME
HAVING COUNT(NAME) > 1
ORDER BY NAME;

# SQL Lv 2. 이름에 el이 들어가는 동물 찾기

SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE ANIMAL_TYPE = 'Dog' 
AND NAME LIKE "%EL%"
ORDER BY NAME;

20240917===========================================

# SQL Lv 1. 동물의 아이디와 이름

SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

# SQL Lv 1. 여러기준으로 정렬하기

SELECT ANIMAL_ID,NAME,DATETIME
FROM ANIMAL_INS
ORDER BY NAME, DATETIME DESC;

# SQL Lv 1. 상위 N개 레코드

SELECT NAME
FROM ANIMAL_INS
ORDER BY DATETIME
LIMIT 1;

# SQL Lv 1. 이름이 있는 동물의 아이디

SELECT ANIMAL_ID 
FROM ANIMAL_INS
WHERE NAME IS NOT NULL;

# SQL Lv 2. 중복 제거하기

SELECT COUNT(DISTINCT NAME) AS count
FROM ANIMAL_INS
WHERE NAME IS NOT NULL;

20240918===========================================

# SQL Lv 1. 나이 정보가 없는 회원 수 구하기

SELECT COUNT(*)
FROM USER_INFO
WHERE AGE IS NULL;

# SQL Lv 1. 강원도에 위치한 생산공장 목록 출력하기

SELECT FACTORY_ID,FACTORY_NAME,ADDRESS
FROM FOOD_FACTORY
WHERE ADDRESS LIKE "강원도%";

# SQL Lv 1. 가장 비싼 상품 구하기

SELECT MAX(PRICE) AS MAX_PRICE
FROM PRODUCT;

# SQL Lv 1. 경기도에 위치한 식품창고 목록 출력하기

# COALESCE(NAME,"DEFAULT")  NAME 출력하고 NAME IS NULL 이면 DEFAULT 출력
SELECT WAREHOUSE_ID,WAREHOUSE_NAME,ADDRESS,COALESCE(FREEZER_YN,'N') AS FREEZER_YN
FROM FOOD_WAREHOUSE
WHERE ADDRESS LIKE "경기도%"
ORDER BY WAREHOUSE_ID;

# SQL Lv 2. 가격이 제일 비싼 식품의 정보 출력하기

SELECT PRODUCT_ID,PRODUCT_NAME,PRODUCT_CD,CATEGORY,PRICE
FROM FOOD_PRODUCT
ORDER BY PRICE DESC
LIMIT 1;

20240921===========================================

# SQL Lv 1. 흉부외과 또는 일반외과 의사 목록 출력하기

#DATE_FORMAT(HIRE_YMD,"%Y-%M-%D")  %D 인지 %d인지에 따라 표현방식 다름
SELECT DR_NAME, DR_ID, MCDP_CD, DATE_FORMAT(HIRE_YMD,"%Y-%m-%d") AS HIRE_YMD
FROM DOCTOR
WHERE MCDP_CD = "CS" OR MCDP_CD = "GS"
ORDER BY HIRE_YMD DESC, DR_NAME;

# SQL Lv 1. 역순 정렬하기

SELECT NAME, DATETIME
FROM ANIMAL_INS
ORDER BY ANIMAL_ID DESC;

# SQL Lv 2. NULL 처리하기

SELECT ANIMAL_TYPE, COALESCE(NAME,"No name") AS NAME,SEX_UPON_INTAKE
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

# SQL Lv 1. 이름이 없는 동물의 아이디

SELECT ANIMAL_ID
FROM ANIMAL_INS
WHERE NAME IS NULL
ORDER BY ANIMAL_ID;


# SQL Lv 2. DATETIME에서 DATE로 형 변환

SELECT ANIMAL_ID,NAME, DATE_FORMAT(DATETIME,"%Y-%m-%d") AS "날짜"
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

20240922===========================================

-- SQL Lv 2. 고양이와 개는 몇 마리 있을까

SELECT ANIMAL_TYPE,COUNT(*) AS "count"
FROM ANIMAL_INS
GROUP BY ANIMAL_TYPE
ORDER BY ANIMAL_TYPE;

-- SQL Lv 2. 중성화 여부 파악하기

SELECT ANIMAL_ID,NAME, 
    CASE WHEN SEX_UPON_INTAKE LIKE '%Neutered%' THEN 'O'
    WHEN SEX_UPON_INTAKE LIKE '%Spayed%' THEN 'O'
    ELSE 'X' END 
    AS "중성화"
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

-- SQL Lv 2. 입양 시각 구하기(1)

SELECT TO_NUMBER(TO_CHAR(DATETIME,'HH24')) AS HOUR,COUNT(*) AS COUNT
FROM ANIMAL_OUTS
WHERE TO_CHAR(DATETIME,'HH24') BETWEEN 9 AND 19
GROUP BY TO_CHAR(DATETIME,'HH24')
ORDER BY HOUR;

20240924===========================================

-- SQL Lv 1. 인기있는 아이스크림

SELECT FLAVOR 
FROM FIRST_HALF
ORDER BY TOTAL_ORDER DESC, SHIPMENT_ID;

-- SQL Lv 1. 12세 이하인 여자 환자 목록 출력하기

SELECT PT_NAME, PT_NO, GEND_CD, AGE, COALESCE(TLNO,'NONE')
FROM PATIENT
WHERE AGE < 13 AND GEND_CD = 'W'
ORDER BY AGE DESC,PT_NAME;

-- SQL Lv 2. 자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기

SELECT CAR_TYPE, COUNT(*) AS CARS
FROM CAR_RENTAL_COMPANY_CAR
WHERE OPTIONS LIKE '%가죽시트%'
  OR OPTIONS LIKE '%열선시트%'
  OR OPTIONS LIKE '%통풍시트%'
GROUP BY CAR_TYPE
ORDER BY CAR_TYPE;

-- SQL Lv 2. 조건에 맞는 도서와 저자 리스트 출력하기

SELECT b.BOOK_ID as BOOK_ID, a.AUTHOR_NAME as AUTHOR_NAME, DATE_FORMAT(b.PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK b
LEFT JOIN AUTHOR a ON b.AUTHOR_ID = A.AUTHOR_ID
WHERE b.CATEGORY = '경제'
ORDER BY b.PUBLISHED_DATE;

20240929===========================================

-- SQL Lv 3. 카테고리별 도서 판매량 집계하기

SELECT CATEGORY, SUM(SALES) AS TOTAL_SALES
FROM BOOK A
RIGHT JOIN BOOK_SALES B ON A.BOOK_ID = B.BOOK_ID
WHERE B.SALES_DATE BETWEEN DATE '2022-01-01' AND DATE '2022-01-31'
GROUP BY A.CATEGORY
ORDER BY 1;

-- LV 2. 상품별 오프라인 매출 구하기

SELECT P.PRODUCT_CODE, SUM(SALES_AMOUNT * P.PRICE) AS SALES
FROM PRODUCT P 
RIGHT JOIN OFFLINE_SALE O
ON P.PRODUCT_ID = O.PRODUCT_ID
GROUP BY P.PRODUCT_CODE
ORDER BY SALES DESC, P.PRODUCT_CODE;

-- Lv 3. 조건별로 분류하여 주문상태 출력하기

SELECT ORDER_ID, PRODUCT_ID, TO_CHAR(OUT_DATE,'YYYY-MM-DD') AS OUT_DATE, CASE WHEN OUT_DATE <= DATE '2022-05-01' THEN '출고완료' WHEN OUT_DATE > DATE '2022-05-01' THEN '출고대기' ELSE '출고미정' END AS "출고여부"
FROM FOOD_ORDER
ORDER BY ORDER_ID;

20241001===========================================

-- Lv 2. 성분으로 구분한 아이스크림 총 주문량

SELECT INGREDIENT_TYPE, SUM(TOTAL_ORDER) AS TOTAL_ORDER
FROM FIRST_HALF A
LEFT JOIN ICECREAM_INFO B
ON A.FLAVOR = B.FLAVOR
GROUP BY B.INGREDIENT_TYPE
ORDER BY TOTAL_ORDER;

-- Lv 3. 오랜기간 보호한 동물 (1)

SELECT A.NAME,A.DATETIME
FROM ANIMAL_INS A
LEFT JOIN ANIMAL_OUTS B
ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE B.ANIMAL_ID IS NULL
ORDER BY A.DATETIME
FETCH FIRST 3 ROWS ONLY;

-- Lv 3. 있었는데요 없었습니다

SELECT a.ANIMAL_ID, a.NAME
FROM ANIMAL_INS a
LEFT JOIN ANIMAL_OUTS b
ON a.ANIMAL_ID = b.ANIMAL_ID
WHERE a.DATETIME > b.DATETIME
ORDER BY a.DATETIME;

20241002===========================================

# Lv 3. 오랜기간 보호한 동물(2)

SELECT B.ANIMAL_ID, B.NAME
FROM ANIMAL_INS A, ANIMAL_OUTS B
WHERE A.ANIMAL_ID = B.ANIMAL_ID
ORDER BY DATEDIFF(B.DATETIME,A.DATETIME) DESC
LIMIT 2;

# Lv 2. 조건에 맞는 아이템들의 가격의 총합 구하기

SELECT SUM(PRICE) AS TOTAL_PRICE
FROM ITEM_INFO
WHERE RARITY = 'LEGEND'

# LV 4. 보호소에서 중성화한 동물

SELECT A.ANIMAL_ID,A.ANIMAL_TYPE,A.NAME
FROM ANIMAL_INS A JOIN ANIMAL_OUTS B
ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE A.SEX_UPON_INTAKE LIKE "Intact%"
AND (B.SEX_UPON_OUTCOME LIKE "Spayed%"
OR B.SEX_UPON_OUTCOME LIKE"Neutered%")
ORDER BY A.ANIMAL_ID;

20241003===========================================

# Lv 3. 대여기록이 존재하는 자동차 리스트 구하기

SELECT DISTINCT A.CAR_ID 
FROM CAR_RENTAL_COMPANY_CAR A
LEFT JOIN CAR_RENTAL_COMPANY_RENTAL_HISTORY B
ON A.CAR_ID = B.CAR_ID
WHERE A.CAR_TYPE = '세단'
AND B.START_DATE BETWEEN '2022-10-01' AND '2022-10-31' 
ORDER BY CAR_ID DESC;

# Lv. 3 조건에 맞는 사용자와 총 거래금액 조회하기

SELECT B.USER_ID,B.NICKNAME,SUM(PRICE) AS TOTAL_SALES
FROM USED_GOODS_BOARD A
LEFT JOIN USED_GOODS_USER B
ON A.WRITER_ID = B.USER_ID 
WHERE A.STATUS = 'DONE' 
GROUP BY B.USER_ID
HAVING TOTAL_SALES >= 700000
ORDER BY TOTAL_SALES;

# Lv 2. 루시와 엘라 찾기

SELECT ANIMAL_ID,NAME,SEX_UPON_INTAKE
FROM ANIMAL_INS
WHERE NAME IN ('Lucy','Ella','Pickle','Rogan','Sabrina','Mitty')
ORDER BY ANIMAL_ID;


20241005===========================================

# Lv 1. 조건에 맞는 도서 리스트 출력하기

SELECT BOOK_ID, DATE_FORMAT(PUBLISHED_DATE,"%Y-%m-%d") AS PUBLISHED_DATE
FROM BOOK
WHERE CATEGORY = '인문'
AND (PUBLISHED_DATE BETWEEN '2021-01-01' AND '2021-12-31')
ORDER BY BOOK_ID,PUBLISHED_DATE;

# Lv 2. 3월에 태어난 여성 회원 목록 출력하기

SELECT MEMBER_ID, MEMBER_NAME, GENDER, DATE_FORMAT(DATE_OF_BIRTH,'%Y-%m-%d') AS DATE_OF_BIRTH
FROM MEMBER_PROFILE
WHERE DATE_FORMAT(DATE_OF_BIRTH,'%m') = '03'
AND TLNO IS NOT NULL AND GENDER = 'W'
ORDER BY MEMBER_ID;

# Lv 4. 식품분류별 가장 비싼 식품의 정보 조회하기

SELECT CATEGORY, PRICE AS MAX_PRICE, PRODUCT_NAME
FROM FOOD_PRODUCT
WHERE PRICE IN (SELECT MAX(PRICE) 
               FROM FOOD_PRODUCT
               GROUP BY CATEGORY)
               AND CATEGORY IN ('식용유','과자','국','김치')
ORDER BY MAX_PRICE DESC;

# Lv 4. 5월 식품들의 총매출 조회하기 - mysql

SELECT FD.PRODUCT_ID, FD.PRODUCT_NAME, SUM(FD.PRICE * FO.AMOUNT) AS TOTAL_SALES
FROM FOOD_ORDER FO
JOIN FOOD_PRODUCT FD ON FO.PRODUCT_ID = FD.PRODUCT_ID
WHERE FO.PRODUCE_DATE BETWEEN '2022-05-01'
                          AND '2022-05-31'
GROUP BY FD.PRODUCT_ID, FD.PRODUCT_NAME
ORDER BY TOTAL_SALES DESC, FD.PRODUCT_ID ASC;

# Lv 3. 즐겨찾기가 가장 많은 식당 정보 출력하기 - mysql

SELECT FOOD_TYPE, REST_ID, REST_NAME, FAVORITES
FROM REST_INFO
WHERE (FOOD_TYPE, FAVORITES) IN (
    SELECT FOOD_TYPE, MAX(FAVORITES)
    FROM REST_INFO
    GROUP BY FOOD_TYPE
)
ORDER BY FOOD_TYPE DESC;

# Lv 2. 연도 별 평균 미세먼지 농도 조회하기 - mysql

SELECT EXTRACT(YEAR FROM YM) AS YEAR,
       ROUND(AVG(PM_VAL1), 2) AS PM10,
       ROUND(AVG(PM_VAL2), 2) AS 'PM2.5'
FROM AIR_POLLUTION
WHERE LOCATION2 = '수원'
GROUP BY EXTRACT(YEAR FROM YM)
ORDER BY YEAR;


# Lv 1. 과일로 만든 아이스크림 고르기 - mysql

SELECT FLAVOR
FROM ICECREAM_INFO
WHERE INGREDIENT_TYPE = 'fruit_based' AND
      FLAVOR IN (
          SELECT FLAVOR
          FROM FIRST_HALF
          WHERE TOTAL_ORDER >= 3000
      );

# Lv 2. 가격대별 상품 개수구하기 - mysql

SELECT FLOOR(PRICE/10000)*10000 AS PRICE_GROUP,
       COUNT(*) AS PRODUCTS
FROM PRODUCT
GROUP BY PRICE_GROUP
ORDER BY PRICE_GROUP;

# Lv 2. 물고기 종류 별 잡은 수 구하기 - mysql

SELECT COUNT(*) AS FISH_COUNT, FN.FISH_NAME
FROM FISH_INFO FI
LEFT JOIN FISH_NAME_INFO FN ON FI.FISH_TYPE = FN.FISH_TYPE
GROUP BY FN.FISH_NAME
ORDER BY FISH_COUNT DESC;

# Lv 1. 잔챙이 잡은 수 구하기 - mysql

SELECT COUNT(*) AS FISH_COUNT
FROM FISH_INFO
WHERE LENGTH IS NULL;

# Lv 1. 잡은 물고기 중 가장 큰 물고기의 길이 구하기

SELECT CONCAT(LENGTH,'cm') AS MAX_LENGTH
FROM FISH_INFO
ORDER BY LENGTH DESC
LIMIT 1;

정렬 오버헤드 발생 가능 아래의 코드는 정렬 오버헤드발생하지 않음

SELECT CONCAT(MAX(LENGTH),'cm') AS MAX_LENGTH
FROM FISH_INFO

# Lv 1. SUV 평균 일일 대여요금 구하기

SELECT ROUND(AVG(DAILY_FEE)) AS AVERAGE_FEE
FROM CAR_RENTAL_COMPANY_CAR
WHERE CAR_TYPE = 'SUV';

# Lv 1. 모든 레코드 조회하기

SELECT ANIMAL_ID, ANIMAL_TYPE, DATETIME, INTAKE_CONDITION, NAME, SEX_UPON_INTAKE
FROM ANIMAL_INS
ORDER BY ANIMAL_ID ASC;

# Lv 2. ROOT 아이템 구하기

-- JOIN 버전

SELECT II.ITEM_ID, II.ITEM_NAME
FROM ITEM_INFO II
LEFT JOIN ITEM_TREE IT
ON II.ITEM_ID = IT.ITEM_ID
WHERE IT.PARENT_ITEM_ID IS NULL
ORDER BY II.ITEM_ID;

-- JOIN 없는 서브쿼리 버전

SELECT ITEM_ID, ITEM_NAME
FROM ITEM_INFO
WHERE ITEM_ID IN (SELECT ITEM_ID
      FROM ITEM_TREE
      WHERE PARENT_ITEM_ID IS NULL)
ORDER BY ITEM_ID;

# Lv 3. 부서별 평균 연봉 조회하기

SELECT HE.DEPT_ID, HD.DEPT_NAME_EN, ROUND(AVG(SAL),0) AS AVG_SAL
FROM HR_EMPLOYEES HE
JOIN HR_DEPARTMENT HD
ON HE.DEPT_ID = HD.DEPT_ID
GROUP BY HE.DEPT_ID
ORDER BY AVG_SAL DESC;

# Lv 1. Python 개발자 찾기

SELECT ID, EMAIL, FIRST_NAME, LAST_NAME
FROM DEVELOPER_INFOS
WHERE SKILL_1 = 'Python'
OR SKILL_2 = 'Python'
OR SKILL_3 = 'Python'
ORDER BY ID ASC;

# Lv 3. 조건에 맞는 사용자 정보 조회하기

SELECT UU.USER_ID, UU.NICKNAME, CONCAT(CITY,' ',UU.STREET_ADDRESS1,' ',IFNULL(UU.STREET_ADDRESS2,'')) AS '전체주소', CONCAT(SUBSTRING(TLNO,1,3),'-',SUBSTRING(TLNO,4,4),'-',SUBSTRING(TLNO,8,4)) AS '전화번호'
FROM USED_GOODS_BOARD UB
LEFT JOIN USED_GOODS_USER UU
ON UB.WRITER_ID = UU.USER_ID
GROUP BY UU.USER_ID
HAVING COUNT(*) > 2
ORDER BY UU.USER_ID DESC;

# Lv 3. 대장균의 크기에 따라 분류하기 1

SELECT
ID,
CASE
WHEN SIZE_OF_COLONY <= 100 THEN 'LOW'
WHEN SIZE_OF_COLONY <= 1000 THEN 'MEDIUM'
ELSE 'HIGH'
END AS SIZE
FROM ECOLI_DATA
ORDER BY ID;

# Lv 1. 잡은 물고기의 평균 길이 구하기

SELECT ROUND(AVG(IFNULL(LENGTH,10)),2) AS AVERAGE_LENGTH
FROM FISH_INFO

# Lv 3. 없어진 기록 찾기

SELECT AO.ANIMAL_ID, AO.NAME
FROM ANIMAL_OUTS AO
LEFT JOIN ANIMAL_INS AI
ON AI.ANIMAL_ID = AO.ANIMAL_ID
WHERE ISNULL(AI.ANIMAL_ID)

# Lv 2. 조건에 부합하는 중고거래 상태 조회하기

SELECT BOARD_ID,WRITER_ID,TITLE,PRICE,
CASE
WHEN STATUS = 'DONE' THEN '거래완료'
WHEN STATUS = 'SALE' THEN '판매중'
ELSE '예약중'
END
AS 'STATUS'
FROM USED_GOODS_BOARD
WHERE CREATED_DATE = '2022-10-05'
ORDER BY BOARD_ID DESC;

# Lv 1. 한 해에 잡은 물고기 수 구하기

SELECT COUNT(*) AS FISH_COUNT
FROM FISH_INFO
WHERE YEAR(TIME) = 2021;

# Lv 1. 최댓값 구하기

-- MAX 안쓰고 풀기
SELECT DATETIME AS '시간'
FROM ANIMAL_INS
ORDER BY DATETIME DESC
LIMIT 1;

-- MAX 쓰고 풀기
SELECT MAX(DATETIME) AS '시간'
FROM ANIMAL_INS;


# Lv 4. 취소되지 않은 진료 예약 조회하기

SELECT AP.APNT_NO,
PT.PT_NAME,
PT.PT_NO,
AP.MCDP_CD,
DR.DR_NAME,
AP.APNT_YMD
FROM APPOINTMENT AP
JOIN DOCTOR DR
ON AP.MDDR_ID = DR.DR_ID
JOIN PATIENT PT
ON AP.PT_NO = PT.PT_NO
WHERE AP.APNT_CNCL_YN = 'N'
AND DATE(AP.APNT_YMD) = '2022-04-13'
AND AP.MCDP_CD = 'CS'
ORDER BY AP.APNT_YMD;

# Lv 2. 조건에 맞는 사원 정보 조회하기

SELECT SUM(SCORE) AS SCORE, HE.EMP_NO, HE.EMP_NAME, HE.POSITION, HE.EMAIL
FROM HR_EMPLOYEES HE
JOIN HR_GRADE HG
ON HG.EMP_NO = HE.EMP_NO
GROUP BY HG.EMP_NO
ORDER BY SCORE DESC
LIMIT 1;

# Lv 2. 특정 물고기를 잡은 총 수 구하기

SELECT COUNT(*) AS FISH_COUNT
FROM FISH_INFO FI
JOIN FISH_NAME_INFO FN
ON FI.FISH_TYPE = FN.FISH_TYPE
WHERE FN.FISH_NAME = 'BASS' OR FN.FISH_NAME = 'SNAPPER';

# Lv 3. 자동차 대여 기록에서 대여중/ 대여가능 여부 구분하기

SELECT DISTINCT CAR_ID,
CASE WHEN CAR_ID IN (
    SELECT CAR_ID
    FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
    WHERE '2022-10-16' BETWEEN START_DATE AND END_DATE
) THEN '대여중'
ELSE '대여 가능'
END AS AVAILABILITY
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
ORDER BY CAR_ID DESC;

# Lv 2. 재구매가 일어난 상품과 회원 리스트 구하기

SELECT USER_ID, PRODUCT_ID
FROM ONLINE_SALE
GROUP BY USER_ID, PRODUCT_ID
HAVING COUNT(*) >= 2
ORDER BY USER_ID , PRODUCT_ID DESC;


# Lv 1. 자동차 대여 기록에서 장기/단기 대여 구분하기

SELECT
  HISTORY_ID,
  CAR_ID,
  DATE_FORMAT(START_DATE, '%Y-%m-%d') AS START_DATE,
  DATE_FORMAT(END_DATE, '%Y-%m-%d') AS END_DATE,
  CASE
    WHEN DATEDIFF(END_DATE, START_DATE) >=  29 THEN '장기 대여'
    ELSE '단기 대여'
  END AS RENT_TYPE
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
WHERE DATE_FORMAT(START_DATE, '%Y-%m') = '2022-09'
ORDER BY HISTORY_ID DESC;

# Lv 2. 자동차 평균 대여 기간 구하기

SELECT CAR_ID, ROUND(AVG(DATEDIFF(END_DATE,START_DATE)+1),1) AS AVERAGE_DURATION
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
GROUP BY CAR_ID
HAVING ROUND(AVG(DATEDIFF(END_DATE,START_DATE)+1),1) >= 7
ORDER BY AVERAGE_DURATION DESC, CAR_ID DESC;

# Lv 3. 조회수가 가장 많은 중고거래 게시판의 첨부파일 조회하기

SELECT
CONCAT('/home/grep/src/',BOARD_ID,'/',FILE_ID,FILE_NAME,FILE_EXT) AS FILE_PATH
FROM USED_GOODS_FILE
WHERE BOARD_ID = (
    SELECT BOARD_ID
    FROM USED_GOODS_BOARD
    ORDER BY VIEWS DESC
    LIMIT 1
)
ORDER BY FILE_ID DESC;

# Lv 4. 저자 별 카테고리 별 매출액 집계하기

SELECT AU.AUTHOR_ID, AU.AUTHOR_NAME, BK.CATEGORY,
SUM(BS.SALES * BK.PRICE) AS TOTAL_SALES
FROM BOOK_SALES BS
JOIN BOOK BK
ON BS.BOOK_ID = BK.BOOK_ID
JOIN AUTHOR AU
ON BK.AUTHOR_ID = AU.AUTHOR_ID
WHERE DATE_FORMAT(BS.SALES_DATE,'%Y-%m') = '2022-01'
GROUP BY AU.AUTHOR_ID, BK.CATEGORY
ORDER BY AU.AUTHOR_ID, BK.CATEGORY DESC;

# Lv 4. 년, 월, 성별 별 상품 구매 회원 수 구하기

SELECT YEAR(OS.SALES_DATE) AS YEAR,
MONTH(OS.SALES_DATE) AS MONTH,
UI.GENDER, COUNT (DISTINCT UI.USER_ID) AS USERS
FROM USER_INFO UI
JOIN ONLINE_SALE OS ON UI.USER_ID = OS.USER_ID
WHERE UI.GENDER IS NOT NULL
GROUP BY YEAR(OS.SALES_DATE), MONTH(OS.SALES_DATE), UI.GENDER
ORDER BY YEAR,MONTH,GENDER;